#!/bin/bash

set -e

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source "/opt/gruntwork/bash-commons/log.sh"
source "/opt/gruntwork/bash-commons/assert.sh"
source "/opt/gruntwork/bash-commons/aws-wrapper.sh"
source "/opt/gruntwork/bash-commons/os.sh"
source "/opt/gruntwork/bash-commons/string.sh"
source "/opt/gruntwork/bash-commons/file.sh"
source "/opt/couchbase-commons/couchbase-common.sh"

readonly DEFAULT_DATA_DIR="$COUCHBASE_BASE_DIR/var/lib/couchbase/data"

readonly DEFAULT_SERVICES="data,index,query,fts"
readonly DEFAULT_INDEX_STORAGE_SETTING="default"

readonly MAX_RETRIES=60
readonly SLEEP_BETWEEN_RETRIES_SEC=5

# Ports: https://developer.couchbase.com/documentation/server/current/install/install-ports.html
readonly DEFAULT_REST_PORT=8091
readonly DEFAULT_CAPI_PORT=8092
readonly DEFAULT_QUERY_PORT=8093
readonly DEFAULT_SEARCH_PORT=8094
readonly DEFAULT_MEMCACHED_PORT=11210
readonly DEFAULT_XDCR_PORT=9998

readonly COUCHBASE_STATIC_CONFIG_PATH="/opt/couchbase/etc/couchbase/static_config"
readonly COUCHBASE_CAPI_CONFIG_PATH="/opt/couchbase/etc/couchdb/default.d/capi.ini"

function print_usage {
  echo
  echo "Usage: run-couchbase-server [options]"
  echo
  echo "This script can be used to configure and initialize a Couchbase Server. This script has been tested with Ubuntu 16.04 and Amazon Linux 2."
  echo
  echo "Required arguments:"
  echo
  echo -e "  --cluster-username\t\tThe username for the Couchbase cluster."
  echo -e "  --cluster-password\t\tThe password for the Couchbase cluster."
  echo
  echo "Important optional arguments:"
  echo
  echo -e "  --node-services\t\tComma-separated list of Couchbase services to run on this node. Default: $DEFAULT_SERVICES."
  echo -e "  --cluster-services\t\tComma-separated list of Couchbase services you plan to run in this cluster. Only used when initializing a new cluster. Default: $DEFAULT_SERVICES."
  echo -e "  --cluster-name\t\tThe name of the Couchbase cluster. Must be the name of an Auto Scaling Group (ASG). Default: use the name of the ASG this node is in."
  echo -e "  --hostname\t\t\tThe hostname to use for this node. Default: look up the node's private hostname in EC2 metadata."
  echo -e "  --use-public-hostname\t\tIf this flag is set, use the node's public hostname from EC2 metadata."
  echo -e "  --rally-point-hostname\tThe hostname of the rally point server that initialized the cluster. If not set, automatically pick a rally point server in the ASG."
  echo -e "  --data-dir\t\t\tThe path to store data files create by the Couchbase data service. Default: $DEFAULT_DATA_DIR."
  echo -e "  --index-dir\t\t\tThe path to store files create by the Couchbase index service. Default: $DEFAULT_DATA_DIR."
  echo
  echo "Optional port settings:"
  echo
  echo -e "  --rest-port\t\t\tThe port to use for the Couchbase Web Console and REST/HTTP API. Default: $DEFAULT_REST_PORT."
  echo -e "  --capi-port\t\t\tThe port to use for Views and XDCR access. Default: $DEFAULT_CAPI_PORT."
  echo -e "  --query-port\t\t\tThe port to use for the Query service REST/HTTP traffic. Default: $DEFAULT_QUERY_PORT."
  echo -e "  --fts-port\t\t\tThe port to use for the Search service REST/HTTP traffic. Default: $DEFAULT_SEARCH_PORT."
  echo -e "  --memcached-port\t\tThe port to use for the Data service. Default: $DEFAULT_MEMCACHED_PORT."
  echo -e "  --xdcr-port\t\t\tThe port to use for the XDCR REST traffic. Default: $DEFAULT_XDCR_PORT."
  echo
  echo "Other optional arguments:"
  echo
  echo -e "  --index-storage-setting\tThe index storage mode for the index service. Must be one of: default, memopt. Default: $DEFAULT_INDEX_STORAGE_SETTING."
  echo -e "  --manage-memory-manually\tIf this flag is set, you can set memory settings manually via the --data-ramsize, --fts-ramsize, and --index-ramsize arguments."
  echo -e "  --data-ramsize\t\tThe data service memory quota in MB. Only used when initializing a new cluster and if --manage-memory-manually is set."
  echo -e "  --index-ramsize\t\tThe index service memory quota in MB. Only used when initializing a new cluster and if --manage-memory-manually is set."
  echo -e "  --fts-ramsize\t\t\tThe full-text service memory quota in MB. Only used when initializing a new cluster and if --manage-memory-manually is set."
  echo -e "  --wait-for-all-nodes\t\tIf this flag is set, this script will wait until all servers in the Couchbase Cluster are added and running."
  echo -e "  --help\t\t\tShow this help text and exit."
  echo
  echo "Example:"
  echo
  echo "  run-couchbase-server --cluster-username admin --cluser-password password"
}

# Add the given rally point server to the Couchbase cluster. If the cluster has not yet been initialized, this will
# result in the cluster being initialized with this rally point. If the cluster has already been initialized, then
# this server will be added as another node to that existing cluster.
function add_rallypoint_to_cluster {
  local readonly cluster_url="$1"
  local readonly cluster_name="$2"
  local readonly cluster_username="$3"
  local readonly cluster_password="$4"
  local readonly index_storage_setting="$5"
  local readonly data_ramsize="$6"
  local readonly fts_ramsize="$7"
  local readonly index_ramsize="$8"
  local readonly cluster_services="$9"
  local readonly node_services="${10}"
  local readonly rally_point_hostname="${11}"
  local readonly rest_port="${12}"

  if cluster_is_initialized "$cluster_url" "$cluster_username" "$cluster_password"; then
    log_info "Cluster $cluster_name is already initialized."
    join_existing_cluster \
      "$cluster_url" \
      "$cluster_name" \
      "$cluster_username" \
      "$cluster_password" \
      "$cluster_url" \
      "$node_services"
  else
    log_info "Cluster $cluster_name is not yet initialized."
    init_new_cluster \
      "$rally_point_hostname" \
      "$rest_port" \
      "$cluster_name" \
      "$cluster_username" \
      "$cluster_password" \
      "$index_storage_setting" \
      "$data_ramsize" \
      "$fts_ramsize" \
      "$index_ramsize" \
      "$cluster_services" \
      "$node_services"
  fi
}

# Wait until the given Couchbase cluster has been initialized. This is primarily useful during the initial deployment
# of a new Couchbase cluster, where non rally point nodes want to join the cluster, but must wait for the rally point
# to first initialize the cluster.
function wait_for_cluster_to_be_initialized {
  local readonly cluster_url="$1"
  local readonly cluster_name="$2"
  local readonly cluster_username="$3"
  local readonly cluster_password="$4"

  log_info "Checking if cluster $cluster_name at $cluster_url is initialized"

  # It can take a WHILE to initialize the cluster on first boot, especially with the slow t2.micro instances we use
  # for testing, so we use more retries here than elsewhere.
  local readonly cluster_init_retires=120

  for (( i=0; i<"$cluster_init_retires"; i++ )); do
    if cluster_is_initialized "$cluster_url" "$cluster_username" "$cluster_password"; then
      log_info "Cluster $cluster_name at $cluster_url is initialized."
      return
    else
      log_warn "Cluster $cluster_name at $cluster_url is not yet initialized. Will sleep for $SLEEP_BETWEEN_RETRIES_SEC seconds and check again."
      sleep "$SLEEP_BETWEEN_RETRIES_SEC"
    fi
  done

  log_error "Cluster $cluster_name at $cluster_url still not initialized after $cluster_init_retires retries."
  exit 1
}

# Wait for Couchbase to boot on the node at the given hostname. Note that this ONLY waits for the Couchbase process to
# boot and start responding to queries; it does NOT check that the Couchbase server has joined a cluster or is active.
function wait_for_couchbase_to_boot {
  local readonly node_url="$1"
  local readonly username="$2"
  local readonly password="$3"

  log_info "Checking if Couchbase server $node_url is booted"

  for (( i=0; i<"$MAX_RETRIES"; i++ )); do
    if couchbase_is_running "$node_url" "$username" "$password"; then
      log_info "Couchbase server $node_url has booted."
      return
    else
      log_warn "Couchbase server $node_url has not yet booted. Will sleep for $SLEEP_BETWEEN_RETRIES_SEC seconds and check again."
      sleep "$SLEEP_BETWEEN_RETRIES_SEC"
    fi
  done

  log_error "Couchbase server $node_url still not booted after $MAX_RETRIES retries."
  exit 1
}

# Initialize a new Couchbase cluster. This command should (a) only be executed from the rally point node and (b) only
# be executed once per cluster. Use cluster_is_initialized to check if a cluster is already initialized.
function init_new_cluster {
  local readonly rally_point_hostname="$1"
  local readonly rest_port="$2"
  local readonly cluster_name="$3"
  local readonly cluster_username="$4"
  local readonly cluster_password="$5"
  local readonly index_storage_setting="$6"
  local readonly data_ramsize="$7"
  local readonly fts_ramsize="$8"
  local readonly index_ramsize="$9"
  local readonly cluster_services="${10}"
  local readonly node_services="${11}"

  log_info "Initializing cluster $cluster_name: rally point: $rally_point_hostname, port: $rest_port, services: $cluster_services, data_ramsize: $data_ramsize, index_ramsize: $index_ramsize, fts_ramsize: $fts_ramsize. This node will be configured to run the $node_services services."

  local cluster_init_args=()

  cluster_init_args+=("cluster-init")
  cluster_init_args+=("--cluster=$rally_point_hostname")
  cluster_init_args+=("--cluster-name=$cluster_name")
  cluster_init_args+=("--cluster-port=$rest_port")
  cluster_init_args+=("--cluster-username=$cluster_username")
  cluster_init_args+=("--cluster-password=$cluster_password")
  cluster_init_args+=("--index-storage-setting=$index_storage_setting")
  cluster_init_args+=("--services=$node_services")

  if string_contains "$cluster_services" "data"; then
    cluster_init_args+=("--cluster-ramsize=$data_ramsize")
  fi

  if string_contains "$cluster_services" "index"; then
    cluster_init_args+=("--cluster-index-ramsize=$index_ramsize")
  fi

  if string_contains "$cluster_services" "fts"; then
    cluster_init_args+=("--cluster-fts-ramsize=$fts_ramsize")
  fi

  local out
  out=$(run_couchbase_cli "${cluster_init_args[@]}")

  if string_contains "$out" "SUCCESS: Cluster initialized"; then
    log_info "Successfully initialized cluster $cluster_name"
  else
    log_error "Failed to initialize cluster $cluster_name. Log output:\n$out"
    exit 1
  fi
}

# Add the given node with the given hostname to the given Couchbase cluster using the server-add command. Note that
# this will NOT result in the node being active; to do that, you must not only add the node, but also rebalance the
# cluster using the rebalance_cluster function.
function add_server_to_cluster {
  local readonly cluster_url="$1"
  local readonly cluster_name="$2"
  local readonly cluster_username="$3"
  local readonly cluster_password="$4"
  local node_url="$5"
  local readonly node_services="$6"

  wait_for_cluster_to_be_initialized "$cluster_url" "$cluster_name" "$cluster_username" "$cluster_password"

  local server_add_args=()

  if [[ "$node_url" != http* && "$node_url" != couchbase* ]]; then
    # Default to http; otherwise, Couchbase will try TLS, which won't work if we haven't explicitly configured TLS!
    # From the docs (https://docs.couchbase.com/server/current/cli/cbcli/couchbase-cli-server-add.html):
    # --server-add <servers>
    #   A comma separated list of servers to add to the cluster. The each server in the list should be identified by a
    #   hostname or IP address. If a scheme is not provided it will use https://
    node_url="http://$node_url"
  fi

  server_add_args+=("server-add")
  server_add_args+=("--cluster=$cluster_url")
  server_add_args+=("--username=$cluster_username")
  server_add_args+=("--password=$cluster_password")
  server_add_args+=("--server-add=$node_url")
  server_add_args+=("--server-add-username=$cluster_username")
  server_add_args+=("--server-add-password=$cluster_password")
  server_add_args+=("--services=$node_services")

  local readonly server_add_max_retries=120
  local readonly sleep_between_server_add_retries_sec=5

  for (( i=0; i<"$server_add_max_retries"; i++ )); do
    if node_is_added_to_cluster "$cluster_url" "$cluster_username" "$cluster_password" "$node_url"; then
      log_info "Node $node_url has already been added to cluster $cluster_name. Will not add again."
      return
    fi

    log_info "Adding node $node_url to cluster $cluster_name at $cluster_url with services $node_services"

    local out
    out=$(run_couchbase_cli "${server_add_args[@]}")

    if string_contains "$out" "SUCCESS: Server added"; then
      log_info "Successfully added node $node_url to cluster $cluster_name."
      return
    else
      log_warn "Failed to add node $node_url to cluster $cluster_name. Will sleep for $sleep_between_server_add_retries_sec seconds and try again. Log output:\n$out"
      sleep "$sleep_between_server_add_retries_sec"
    fi
  done

  log_error "Failed to add node $node_url to cluster $cluster_name after $server_add_max_retries retries."
  exit 1
}

# Rebalance the cluster. This command must be called each time you add a new node; until it's called, the node will not
# be in active state and won't actually serve any traffic.
function rebalance_cluster {
  local readonly cluster_url="$1"
  local readonly cluster_name="$2"
  local readonly cluster_username="$3"
  local readonly cluster_password="$4"
  local readonly node_url="$5"

  wait_for_cluster_to_be_initialized "$cluster_url" "$cluster_name" "$cluster_username" "$cluster_password"

  local rebalance_args=()

  rebalance_args+=("rebalance")
  rebalance_args+=("--cluster=$cluster_url")
  rebalance_args+=("--username=$cluster_username")
  rebalance_args+=("--password=$cluster_password")
  rebalance_args+=("--no-progress-bar")

  local readonly rebalance_max_retries=20
  local readonly sleep_between_rebalance_retries_sec=30

  for (( i=0; i<"$rebalance_max_retries"; i++ )); do
    if node_is_active_in_cluster "$cluster_url" "$cluster_username" "$cluster_password" "$node_url"; then
      log_info "Node $node_url is already active in cluster $cluster_name. No need to run rebalance."
      return
    fi

    log_info "Rebalancing cluster $cluster_name with rally point $cluster_url"

    local out
    out=$(run_couchbase_cli "${rebalance_args[@]}")

    if string_contains "$out" "SUCCESS: Rebalance complete"; then
      log_info "Successfully rebalanced cluster $cluster_name."
      # Note that we intentionally do NOT return here. Instead, we re-enter the for-loop again to check if the node is
      # finally active in the cluster. Every now and then, even though rebalance completes successfully, a node will
      # remain in "inactiveAdded" state, and we have to run rebalance yet again.
    else
      log_warn "Rebalance of cluster $cluster_name failed. Will sleep for $sleep_between_rebalance_retries_sec seconds and try again. Log output:\n$out"
      sleep "$sleep_between_rebalance_retries_sec"
    fi
  done

  log_error "Failed to rebalance cluster $cluster_name after $rebalance_max_retries retries."
  exit 1
}

# Join a node to an existing Couchbase cluster. This method is idempotent: it will add the node to the cluster if it
# hasn't been added already and rebalance the cluster if the node isn't active already.
function join_existing_cluster {
  local readonly cluster_url="$1"
  local readonly cluster_name="$2"
  local readonly cluster_username="$3"
  local readonly cluster_password="$4"
  local readonly node_url="$5"
  local readonly node_services="$6"

  log_info "Joining cluster $cluster_name at $cluster_url"

  add_server_to_cluster \
    "$cluster_url" \
    "$cluster_name" \
    "$cluster_username" \
    "$cluster_password" \
    "$node_url" \
    "$node_services"

  rebalance_cluster \
    "$cluster_url" \
    "$cluster_name" \
    "$cluster_username" \
    "$cluster_password" \
    "$node_url"
}

# Check that the user has not manually specified any of the memory settings and exit with an error if they have. To
# keep things simple, we allow either (a) all memory settings to be specified manually, for which the user must set
# the --manage-memory-manually flag or (b) all memory settings to be calculated automatically, in which case we use
# this method to make sure the user isn't fooled into believing some of their manual settings are being used.
function assert_memory_settings_specified_automatically {
  local readonly data_ramsize="$1"
  local readonly index_ramsize="$2"
  local readonly fts_ramsize="$3"

  assert_empty "--data-ramsize" "$data_ramsize" "This flag can only be set if the --manage-memory-manually flag is set."
  assert_empty "--index-ramsize" "$index_ramsize" "This flag can only be set if the --manage-memory-manually flag is set."
  assert_empty "--fts-ramsize" "$fts_ramsize" "This flag can only be set if the --manage-memory-manually flag is set."
}

# Check check that the user has manually specified the memory settings for each service they requested and exit with
# an error if any memory settings are missing. To keep things simple, we allow either (a) all memory settings to be
# calculated automatically or (b) all memory settings to be specified manually, for which the user must set the
# --manage-memory-manually flag, and we use this method to make sure they've specified all the required settings.
function assert_memory_settings_specified_manually {
  local readonly services="$1"
  local readonly data_ramsize="$2"
  local readonly index_ramsize="$3"
  local readonly fts_ramsize="$4"

  log_info "The --manage-memory-manually flag is set. Checking that you've specified memory settings for all services..."

  if string_contains "$services" "data"; then
    assert_not_empty "--data-ramsize" "$data_ramsize" "The --manage-memory-manually flag is set and the data service is included in --services."
  fi

  if string_contains "$services" "index"; then
    assert_not_empty "--index-ramsize" "$index_ramsize" "The --manage-memory-manually flag is set and the index service is included in --services."
  fi

  if string_contains "$services" "fts"; then
    assert_not_empty "--fts-ramsize" "$fts_ramsize" "The --manage-memory-manually flag is set and the fts service is included in --services."
  fi
}

# Automatically determine how much memory to provide Couchbase data nodes, index nodes, and full text search (fts)
# nodes. See the README for the details of this very simple calculation.
#
# In the future, we may want to use more sophisticated strategies to better deal with servers with a tiny or huge
# amount of memory.
#
# Important note on the memory math below: bash cannot do floating point arithmetic! So we have to use solely integer
# math.
function calculate_memory_settings_automatically {
  local readonly services="$1"

  log_info "Calculating memory settings automatically..."

  local total_memory_mb
  total_memory_mb=$(os_get_available_memory_mb)

  # It took some digging through the Couchbase source code, but the maximum quota they will allow you to use is 80% of
  # the total available memory on the server. In practice, it seems like 65% is a safer target, so we should divide
  # that up amongst all the services.
  # https://github.com/couchbase/ns_server/blob/bc1460747b634ac85af8dd118857d1f494256cc5/src/memory_quota.erl#L78-L84
  # https://github.com/couchbase/ns_server/blob/7cdac3af08ce0d8640e9066d268026f4de32a580/include/ns_common.hrl#L206
  local readonly available_memory=$(($total_memory_mb * 65 / 100))

  local data_ramsize=0
  local index_ramsize=0
  local fts_ramsize=0

  if string_contains "$services" "data" && string_contains "$services" "index" && string_contains "$services" "fts"; then
    data_ramsize=$(($available_memory * 50 / 100))
    index_ramsize=$(($available_memory * 25 / 100))
    fts_ramsize=$(($available_memory * 25 / 100))
  elif string_contains "$services" "data" && string_contains "$services" "index"; then
    data_ramsize=$(($available_memory * 65 / 100))
    index_ramsize=$(($available_memory * 35 / 100))
  elif string_contains "$services" "data" && string_contains "$services" "fts"; then
    data_ramsize=$(($available_memory * 65 / 100))
    fts_ramsize=$(($available_memory * 35 / 100))
  elif string_contains "$services" "index" && string_contains "$services" "fts"; then
    index_ramsize=$(($available_memory * 50 / 100))
    fts_ramsize=$(($available_memory * 50 / 100))
  elif string_contains "$services" "data"; then
    data_ramsize="$available_memory"
  elif string_contains "$services" "index"; then
    index_ramsize="$available_memory"
  elif string_contains "$services" "fts"; then
    fts_ramsize="$available_memory"
  fi

  # Couchbase enforces minimums on memory quotas too:
  # https://github.com/couchbase/ns_server/blob/bc1460747b634ac85af8dd118857d1f494256cc5/src/memory_quota.erl#L169-L178
  if [[ "$data_ramsize" -gt 0 && "$data_ramsize" -lt 256 ]]; then
    data_ramsize=256
  fi
  if [[ "$index_ramsize" -gt 0 && "$index_ramsize" -lt 256 ]]; then
    index_ramsize=256
  fi
  if [[ "$fts_ramsize" -gt 0 && "$fts_ramsize" -lt 256 ]]; then
    fts_ramsize=256
  fi

  # This is a hacky way to return multiple values from Bash that happens to work because our values contain no spaces
  # https://stackoverflow.com/a/39063403/483528
  echo "$data_ramsize" "$index_ramsize" "$fts_ramsize"
}

function configure_couchbase_ports {
  local readonly rest_port="$1"
  local readonly capi_port="$2"
  local readonly query_port="$3"
  local readonly fts_port="$4"
  local readonly memcached_port="$5"
  local readonly xdcr_port="$6"

  log_info "Configuring Couchbase ports"

  # Most ports in Couchbase are configured in the static config, but the capi port is configured in a separate file.
  # For info on these names and files, see:
  #
  # https://developer.couchbase.com/documentation/server/current/install/install-ports.html

  file_replace_or_append_text "^{rest_port.*}\.$" "{rest_port, $rest_port}." "$COUCHBASE_STATIC_CONFIG_PATH"
  file_replace_or_append_text "^{query_port.*}\.$" "{query_port, $query_port}." "$COUCHBASE_STATIC_CONFIG_PATH"
  file_replace_or_append_text "^{fts_http_port.*}\.$" "{fts_http_port, $fts_port}." "$COUCHBASE_STATIC_CONFIG_PATH"
  file_replace_or_append_text "^{memcached_port.*}\.$" "{memcached_port, $memcached_port}." "$COUCHBASE_STATIC_CONFIG_PATH"
  file_replace_or_append_text "^{xdcr_rest_port.*}\.$" "{xdcr_rest_port, $xdcr_port}." "$COUCHBASE_STATIC_CONFIG_PATH"
  file_replace_or_append_text "^port.*=.*$" "port = $capi_port" "$COUCHBASE_CAPI_CONFIG_PATH"
}

function configure_couchbase_server {
  local readonly node_hostname="$1"
  local readonly rest_port="$2"
  local readonly username="$3"
  local readonly password="$4"
  local readonly data_dir="$5"
  local readonly index_dir="$6"

  log_info "Initializing Couchbase node with hostname $node_hostname, data dir $data_dir, and index dir $index_dir"

  local node_init_args=()
  node_init_args+=("node-init")
  node_init_args+=("--cluster=$node_hostname:$rest_port")
  node_init_args+=("--username=$username")
  node_init_args+=("--password=$password")
  node_init_args+=("--node-init-data-path=$data_dir")
  node_init_args+=("--node-init-index-path=$index_dir")
  node_init_args+=("--node-init-hostname=$node_hostname")

  for (( i=0; i<"$MAX_RETRIES"; i++ )); do
    local out
    out=$(run_couchbase_cli "${node_init_args[@]}")

    if string_contains "$out" "SUCCESS: Node initialized"; then
      log_info "Successfully initialized local Couchbase node."
      return
    else
      log_warn "Failed to initialize local Couchbase node. Will sleep for $SLEEP_BETWEEN_RETRIES_SEC seconds and try again. Log output:\n$out."
      sleep "$SLEEP_BETWEEN_RETRIES_SEC"
    fi
  done

  log_error "Unable to initialize Couchbase node with hostname $node_hostname, data dir $data_dir, and index dir $index_dir after $MAX_RETRIES retries."
  exit 1
}

function wait_for_all_nodes_to_be_active_in_cluster {
  local readonly cluster_url="$1"
  local readonly cluster_username="$2"
  local readonly cluster_password="$3"
  local readonly asg_name="$4"
  local readonly aws_region="$5"
  local readonly use_public_ips="$6"
  local readonly rest_port="$7"

  local hostnames
  hostnames=($(aws_wrapper_get_hostnames_in_asg "$asg_name" "$aws_region" "$use_public_ips"))
  assert_not_empty_or_null "$hostnames" "Hostnames in ASG $asg_name in $aws_region"

  log_info "Waiting for all nodes in the cluster to be in active state..."

  local hostname
  for hostname in "${hostnames[@]}"; do
    wait_for_node_to_be_active_in_cluster "$cluster_url" "$cluster_username" "$cluster_password" "$hostname:$rest_port"
  done

  log_info "${#hostnames[@]} / ${#hostnames[@]} nodes are now active!"
}

# Wait until the node with the given hostname has already been added (via the server-add command) to the Couchbase
# cluster and is active (via the rebalance command).
function wait_for_node_to_be_active_in_cluster {
  local readonly cluster_url="$1"
  local readonly cluster_username="$2"
  local readonly cluster_password="$3"
  local readonly node_url="$4"

  log_info "Waiting for node $node_url to be active in cluster $cluster_url"

  local readonly node_active_retries=200
  local readonly sleep_between_retries=5

  for (( i=0; i<"$node_active_retries"; i++ )); do
    if node_is_active_in_cluster "$cluster_url" "$cluster_username" "$cluster_password" "$node_url"; then
      log_info "Node $node_url is active in cluster $cluster_url!"
      return
    else
      log_warn "Node $node_url is not yet active in cluster $cluster_url. Will sleep for $sleep_between_retries seconds and check again."
      sleep "$sleep_between_retries"
    fi
  done

  log_error "Node $node_url still not active in cluster $cluster_url after $node_active_retries retries."
  exit 1
}

function start_couchbase {
  log_info "Starting Couchbase"

  sudo systemctl enable couchbase-server
  sudo systemctl start couchbase-server
}

# The main entrypoint for this code
function run {
  local cluster_name
  local node_services="$DEFAULT_SERVICES"
  local cluster_services="$DEFAULT_SERVICES"

  local node_hostname
  local rally_point_hostname
  local use_public_hostname="false"
  local index_storage_setting="$DEFAULT_INDEX_STORAGE_SETTING"

  local cluster_username
  local cluster_password

  local manage_memory_manually="false"
  local data_ramsize
  local fts_ramsize
  local index_ramsize

  local rest_port="$DEFAULT_REST_PORT"
  local capi_port="$DEFAULT_CAPI_PORT"
  local query_port="$DEFAULT_QUERY_PORT"
  local fts_port="$DEFAULT_SEARCH_PORT"
  local memcached_port="$DEFAULT_MEMCACHED_PORT"
  local xdcr_port="$DEFAULT_XDCR_PORT"

  local data_dir="$DEFAULT_DATA_DIR"
  local index_dir="$DEFAULT_DATA_DIR"

  local wait_for_all_nodes="false"
  local aws_region

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --node-services)
        assert_not_empty "$key" "$2"
        node_services="$2"
        shift
        ;;
      --cluster-services)
        assert_not_empty "$key" "$2"
        cluster_services="$2"
        shift
        ;;
      --cluster-name)
        assert_not_empty "$key" "$2"
        cluster_name="$2"
        shift
        ;;
      --cluster-username)
        cluster_username="$2"
        shift
        ;;
      --cluster-password)
        cluster_password="$2"
        shift
        ;;
      --index-storage-setting)
        assert_not_empty "$key" "$2"
        index_storage_setting="$2"
        shift
        ;;
      --hostname)
        assert_not_empty "$key" "$2"
        node_hostname="$2"
        shift
        ;;
      --rally-point-hostname)
        assert_not_empty "$key" "$2"
        rally_point_hostname="$2"
        shift
        ;;
      --data-dir)
        assert_not_empty "$key" "$2"
        data_dir="$2"
        shift
        ;;
      --index-dir)
        assert_not_empty "$key" "$2"
        index_dir="$2"
        shift
        ;;
      --use-public-hostname)
        use_public_hostname="true"
        ;;
      --manage-memory-manually)
        manage_memory_manually="true"
        ;;
      --data-ramsize)
        assert_not_empty "$key" "$2"
        data_ramsize="$2"
        shift
        ;;
      --fts-ramsize)
        assert_not_empty "$key" "$2"
        fts_ramsize="$2"
        shift
        ;;
      --index-ramsize)
        assert_not_empty "$key" "$2"
        index_ramsize="$2"
        shift
        ;;
      --rest-port)
        assert_not_empty "$key" "$2"
        rest_port="$2"
        shift
        ;;
      --capi-port)
        assert_not_empty "$key" "$2"
        capi_port="$2"
        shift
        ;;
      --query-port)
        assert_not_empty "$key" "$2"
        query_port="$2"
        shift
        ;;
      --fts-port)
        assert_not_empty "$key" "$2"
        fts_port="$2"
        shift
        ;;
      --memcached-port)
        assert_not_empty "$key" "$2"
        memcached_port="$2"
        shift
        ;;
      --xdcr-port)
        assert_not_empty "$key" "$2"
        xdcr_port="$2"
        shift
        ;;
      --wait-for-all-nodes)
        wait_for_all_nodes="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_is_installed "aws"
  assert_is_installed "jq"

  assert_not_empty "--cluster-username" "$cluster_username"
  assert_not_empty "--cluster-password" "$cluster_password"

  log_info "Starting configuration of Couchbase server..."

  local readonly rally_point_args=(--cluster-name "$cluster_name" --node-hostname "$node_hostname" --use-public-hostname "$use_public_hostname" --rally-point-hostname "$rally_point_hostname")
  read cluster_name node_hostname aws_region rally_point_hostname < <("/opt/couchbase-commons/couchbase-rally-point" "${rally_point_args[@]}")

  assert_not_empty_or_null "$cluster_name" "cluster name"
  assert_not_empty_or_null "$node_hostname" "node hostname"
  assert_not_empty_or_null "$aws_region" "AWS region"
  assert_not_empty_or_null "$rally_point_hostname" "rally point hostname"

  if [[ "$manage_memory_manually" == "true" ]]; then
    assert_memory_settings_specified_manually "$cluster_services" "$data_ramsize" "$index_ramsize" "$fts_ramsize"
  else
    assert_memory_settings_specified_automatically "$data_ramsize" "$index_ramsize" "$fts_ramsize"
    read data_ramsize index_ramsize fts_ramsize < <(calculate_memory_settings_automatically "$cluster_services")
  fi

  local readonly cluster_url="$rally_point_hostname:$rest_port"
  local readonly node_url="$node_hostname:$rest_port"

  configure_couchbase_ports \
    "$rest_port" \
    "$capi_port" \
    "$query_port" \
    "$fts_port" \
    "$memcached_port" \
    "$xdcr_port"

  start_couchbase

  wait_for_couchbase_to_boot "$node_url" "$cluster_username" "$cluster_password"

  configure_couchbase_server "$node_hostname" "$rest_port" "$cluster_username" "$cluster_password" "$data_dir" "$index_dir"

  if [[ "$node_hostname" == "$rally_point_hostname" ]]; then
    log_info "This server is the rally point for cluster $cluster_name, $cluster_url!"
    add_rallypoint_to_cluster \
      "$cluster_url" \
      "$cluster_name" \
      "$cluster_username" \
      "$cluster_password" \
      "$index_storage_setting" \
      "$data_ramsize" \
      "$fts_ramsize" \
      "$index_ramsize" \
      "$cluster_services" \
      "$node_services" \
      "$rally_point_hostname" \
      "$rest_port"
  else
    log_info "The rally point for cluster $cluster_name is $cluster_url."
    join_existing_cluster \
      "$cluster_url" \
      "$cluster_name" \
      "$cluster_username" \
      "$cluster_password" \
      "$node_url" \
      "$node_services"
  fi

  if [[ "$wait_for_all_nodes" == "true" ]]; then
    wait_for_all_nodes_to_be_active_in_cluster "$cluster_url" "$cluster_username" "$cluster_password" "$cluster_name" "$aws_region" "$use_public_hostname" "$rest_port"
  fi

  log_info "Couchbase server configured successfully!"
}

run "$@"